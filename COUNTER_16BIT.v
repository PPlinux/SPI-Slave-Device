/* Generated by Yosys 0.29+11 (git sha1 acfdc5cc4, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module COUNTER_16BIT(clk, en, rst, overflow, dout, ndout);
  wire [31:0] _0_;
  reg _1_;
  wire _2_;
  wire _3_;
  wire [15:0] _4_;
  wire [15:0] _5_;
  reg [15:0] _6_ = 16'h0000;
  wire _7_;
  wire _8_;
  wire _9_;
  input clk;
  wire clk;
  wire [15:0] cnt_reg;
  output [15:0] dout;
  wire [15:0] dout;
  input en;
  wire en;
  output [15:0] ndout;
  wire [15:0] ndout;
  output overflow;
  wire overflow;
  input rst;
  wire rst;
  assign _2_ = { 16'h0000, cnt_reg } == 32'd0;
  assign _3_ = _2_ ? 1'h1 : 1'h0;
  assign _4_ = ~ cnt_reg;
  assign _5_ = en ? _0_[15:0] : cnt_reg;
  always @(posedge clk, posedge rst)
    if (rst) _6_ <= 16'h0000;
    else _6_ <= _5_;
  assign _7_ = ~ rst;
  assign _8_ = en & _7_;
  assign _9_ = _8_ ? _3_ : _1_;
  always @(posedge clk)
    _1_ <= _9_;
  assign _0_ = { 16'h0000, cnt_reg } + 32'd1;
  assign cnt_reg = _6_;
  assign overflow = _1_;
  assign dout = cnt_reg;
  assign ndout = _4_;
endmodule

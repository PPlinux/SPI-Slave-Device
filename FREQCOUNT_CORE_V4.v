/* Generated by Yosys 0.29+11 (git sha1 acfdc5cc4, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module FREQCOUNT_CORE_V4(clk, rst, en, cnt_clk, int_ack, interval_time, \int , freq);
  wire _00_;
  wire _01_;
  wire [31:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [3:0] _06_;
  reg [3:0] _07_;
  wire _08_;
  reg _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  reg _14_;
  wire [26:0] _15_;
  reg [26:0] _16_ = 27'h0000000;
  wire _17_;
  reg _18_;
  wire [31:0] _19_;
  reg [31:0] _20_;
  wire _21_;
  wire [31:0] _22_;
  wire _23_;
  wire [31:0] _24_;
  reg [31:0] _25_;
  wire [26:0] _26_;
  wire _27_;
  wire _28_;
  wire [26:0] _29_;
  wire _30_;
  wire _31_;
  input clk;
  wire clk;
  input cnt_clk;
  wire cnt_clk;
  wire cnt_en;
  wire [31:0] cnt_reg;
  wire cnt_rst;
  input en;
  wire en;
  wire [3:0] flipflop_delay;
  output [31:0] freq;
  wire [31:0] freq;
  output \int ;
  wire \int ;
  input int_ack;
  wire int_ack;
  wire interrupt;
  wire [26:0] interval;
  input [31:0] interval_time;
  wire [31:0] interval_time;
  input rst;
  wire rst;
  assign _22_ = { 5'h00, interval } + 32'd1;
  assign _26_ = _11_ ? interval : _22_[26:0];
  assign _27_ = _11_ ? 1'h1 : interrupt;
  assign _28_ = int_ack ? 1'h1 : 1'h0;
  assign _29_ = int_ack ? 27'h0000000 : _26_;
  assign _30_ = int_ack ? 1'h0 : _27_;
  assign _31_ = cnt_rst | rst;
  assign _01_ = en & cnt_en;
  assign _02_ = cnt_reg + 32'd1;
  assign _00_ = en & _11_;
  assign _03_ = flipflop_delay[3:1] == 3'h0;
  assign _04_ = flipflop_delay[3:1] == 3'h7;
  function [0:0] \58 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \58  = b[0:0];
      2'b1?:
        \58  = b[1:1];
      default:
        \58  = a;
    endcase
  endfunction
  assign _05_ = \58 (cnt_en, 2'h1, { _04_, _03_ });
  assign _06_ = en ? { flipflop_delay[2:0], interrupt } : flipflop_delay;
  always @(posedge cnt_clk)
    _07_ <= _06_;
  assign _08_ = en ? _05_ : cnt_en;
  always @(posedge cnt_clk)
    _09_ <= _08_;
  assign _10_ = ~ rst;
  assign _12_ = en & _10_;
  assign _13_ = _12_ ? _28_ : cnt_rst;
  always @(posedge clk)
    _14_ <= _13_;
  assign _11_ = { 5'h00, interval } == interval_time;
  assign _15_ = en ? _29_ : interval;
  always @(posedge clk, posedge rst)
    if (rst) _16_ <= 27'h0000000;
    else _16_ <= _15_;
  assign _17_ = en ? _30_ : interrupt;
  always @(posedge clk, posedge rst)
    if (rst) _18_ <= 1'h0;
    else _18_ <= _17_;
  assign _19_ = _01_ ? _02_ : cnt_reg;
  always @(posedge cnt_clk, posedge _31_)
    if (_31_) _20_ <= 32'd0;
    else _20_ <= _19_;
  assign _21_ = ~ rst;
  assign _23_ = _00_ & _21_;
  assign _24_ = _23_ ? cnt_reg : _25_;
  always @(posedge clk)
    _25_ <= _24_;
  assign flipflop_delay = _07_;
  assign cnt_en = _09_;
  assign cnt_rst = _14_;
  assign interval = _16_;
  assign interrupt = _18_;
  assign cnt_reg = _20_;
  assign \int  = interrupt;
  assign freq = _25_;
endmodule
